/*
Utiliser freesurface quand on détruit une entité de type sprite


Tower Defense 
    [Les étapes]
    - Menu pour jouer 
    - Le jeu se lance :
        - Inventaire
        - Timer de lancement
        - Système de waves
        - Ennemis différents

    [World]
        [Génération de base]
            - Background
            - Cells (Emplacements pour les tours)
            - Path
            - Spawners (Où les ennemies spawn)
        [Éléments]

    [Modules]
        - Graphismes
            - Gestion des fenêtres (Menu/Jeu/autres...)
            - Sprites
            - Gestion des Guis
        - Sounds
        - Game Logic
            - Déplacement des ennemis
            - Tours qui tirent si l'enemi rentre dans la zone de celle-ci (trigger des animations)
                Je veux que les calculs et les animations soient syncros
                
            - Où la souris vise
                - Si vise ennemis ou alliés
                    - Affiche nom et PV
                - Si vise tour 
                    - Affiche nom, bouton pour upgrades et les upgrades
                - Si vise inventaire
                    - Peut déplacer une tour
                    - Si tour sur cellule 
                        Si argent alors pose la tour sur la cellule
                            - player.money -= tower.cost
        - Pool/Inventaire (in game)
            - Draggable towers 

        - PathFInder (enemies must be able to follow a clear path to the base)

    [Classes]
        - Sprites
            - Afficher Sprite (position)
            - Animer Sprite
        - Towers
            - Pouvoir placer des tours dans les cellules
            - Range (Peut s'afficher quand on place la souris dessus)
            - Dégâts par missile
        - Ennemies
            - Allocation dynamique en mémoire
            - Points de vie
            - Si touche la base : base -= enemy.HP
        - Allies
            - Rentre dans les ennemis (vehicles)
            - Tirent sur les ennemis
                - S'arrête quand ennemi dans range (hérite de prop range et fire(missiles))
        - Joueur
            - A un inventaire avec toutes les tours 
            - A un inventaire actif (celui utilisé dans le jeu)
                - Basiquement génère la pool à tours dans la partie en parcourant le tableau d'inventaire actif
            - Attributs : 
                - IG_Cash (cash utilisé durant la partie)            
                - Cash (cash pour acheter des tours dans le SHOP)

    [Order]
        - Game Loop
            - User Input
            - Game logic
            - Graphics

    [IDEAS]
        - Niveau d'amélioration pour les ennemis 
        - Skins pour les tours
        - Ennemis capables d'attaquer (désactivation des tours)

    [ASSETS]
        - https://kenney.nl/assets/topdown-tanks-redux
        - https://kenney.nl/assets/tower-defense-top-down
        - https://free-game-assets.itch.io/zombie-top-down-shooter-game-kit

    [LOGICIELS]
        - Tiled (Pour créer les maps)

*/
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
INIT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
objective_t A;
    objective_t B;
    objective_t C;

    instances.objectives.push_back(A);
    instances.objectives.push_back(B);
    instances.objectives.push_back(C);

    instances.objectives[0].next = &B;
    instances.objectives[0].position = Vector2(100,100);

    instances.objectives[1].next = &C;
    instances.objectives[1].position = Vector2(400,200);

    instances.objectives[2].next = NULL;
    instances.objectives[2].position = Vector2(600,600);

    Enemy& enei = instances.GetEnemy(0);
    enei.SetObjective(
        instances.objectives[0]
    );

    Vector2 v = (*enei.GetObjective()).position - enei.GetPosition(); 
    v = Vector2(v.getX(),v.getY());
    v.normalizeVector();

    enei.SetDirection(v);
   
    /*
        Le menu se lance
            Choix jouer
                Choix de la carte
                Bouton start
            Choix son

        Le jeu se lance
            Une partie
                Lis la carte, 
                    Infos 
                        Position des tiles 
                        Position des objectifs 
    */

    /*
    instances.AddEnemy(
        Enemy(
            Vector2(
                300,
                300
            ),
            50,
            1,
            assetManager
        )
    );
    */
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
UPDATE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Example de code pour charger la map
/*
    SDL_Rect t{0,0, 16,16};
    for(int x = 0; x < 40; x++){
        for(int z = 0; z < 40; z++){
            SDL_Rect r{x*16,z*16, 16,16};

            SDL_RenderCopy(renderer,tileset,&t,&r);
        }
    }
*/

for (auto enemy : instances.GetEnemies()) {
    TextureManager::BlitSprite(
        enemy.GetSprite(),
        renderer
    );
}

Enemy& e = instances.GetEnemy(0);
Vector2 v = e.GetDirection();

Vector2 ob_pos = (*e.GetObjective()).position;
//ob_pos.printVector2();

Vector2 dis = ob_pos - e.GetPosition();
dis = Vector2(dis.getX(),dis.getY());

//printf("%f \n",dis.getMag());

// Vérifier que l'ennemi est aux alentours de l'objectif
if (!(&dis == NULL)){
    if (dis.getMag() <= 10){
        //printf("Dépassement \n");
        for(int i = 0; i < instances.objectives.size(); i++){
            if (&(instances.objectives[i]) == e.GetObjective()){
                printf("premier");
                if ((i + 1) < instances.objectives.size()){
                    e.SetObjective(instances.objectives[i+1]);
                }
            }
        }
        (*e.GetObjective()).position.printVector2();

        Vector2 v2 = (*e.GetObjective()).position - e.GetPosition(); 
        v2 = Vector2(v.getX(),v.getY());
        v2.normalizeVector();

        e.SetDirection(v);
    }
}

v.setMag(e.GetSpeed());
e.Move(
    v
);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AFFICHER SPRITE
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    SDL_Rect r = SDL_Rect{0,0,150,150};
    SDL_Texture* t = TextureManager::LoadTexture("../assets/enemyBlack1.png",renderer);
    //SDL_QueryTexture(t,NULL, NULL,&r.w, &r.h);
    spt = Sprite(r,t);




affichage argent
tête chercheuse




1- Ennemis spawn/FPS et respawn ----   50000h ??
2- Tour pouvoir -> dégat Ennemis  ----   5h / 2
3- game over back menu       ----       30min
4- autre ennemis / vague ennemis / update asset / ajout sons ---- 20h
5- mise en place / affichage argent pour tours   ----   30 sec


cadence tir tour   (segmentation THUNDER)         Tower Fire()
enemy assets explosion (reset explode to false et timer)     game.cpp 545 


SDL_Rect z = {enemy.GetSprite().GetRect().x + enemy.GetSprite().GetRect().w/2, enemy.GetSprite().GetRect().y+ enemy.GetSprite().GetRect().h/2,5,5};
SDL_RenderFillRect(renderer, &z);
enemy assets explosion (reset explode to false et timer)     game.cpp 545 
